/*
 1,将表头扁平成一维结构（一个cell是一个对象）。与多叉树联想。
 2,给每个cell添加一些属性，重点是跨行，跨列属性，层级属性，
 3，跨列属性，根据其总共有多少个叶子节点判断。若无叶子节点，那么只有一列
 4, 跨行属性，根据其到最远叶子节点的距离判断。联想多叉树。
 5，根据层级属性将其拼成二维数组
*/ 

let headerData = [
    {
        name: '地区',
    },
    {
        name: '总数据',
        children: [
            {
                name: '数据1',
                children: [
                    {
                        name: '数据11',
                        children: [
                            {
                                name: '数据111',
                            },
                            {
                                name: '数据112',
                            }
                        ]
                    },
                    {
                        name: '数据12',
                        children: [
                            {
                                name: '数据121',
                            },
                            {
                                name: '数据122',
                            }
                        ]
                    },
                    {
                        name: '数据13',
                        children: [
                            {
                                name: '数据131',
                            },
                            {
                                name: '数据132',
                            }
                        ]
                    },
                    {
                        name: '数据14',
                    },

                ]
            }
        ]
    }
];

let bodyData = [
    ["地区最先","数据111","数据112","数据121","数据122","数据131","数据132","数据14"],
    ["地区","数据111","数据112","数据121","数据122","数据131","数据132","数据14"],
    ["地区","数据111","数据112","数据121","数据122","数据131","数据132","数据14"],
    ["地区","数据111","数据112","数据121","数据122","数据131","数据132","数据14"],
    ["地区","数据111","数据112","数据121","数据122","数据131","数据132","数据14"],
    ["地区","数据111","数据112","数据121","数据122","数据131","数据132","数据14"],
    ["地区","数据111","数据112","数据121","数据122","数据131","数据132","数据14"],
    ["地区","数据111","数据112","数据121","数据122","数据131","数据132","数据14"], 
    ["地区","数据111","数据112","数据121","数据122","数据131","数据132","数据14"], 
    ["地区最后","数据111","数据112","数据121","数据122","数据131","数据132","数据14"], 
]

/**
 * 获取 节点的所有叶子节点个数
 * @param {Object} json Object对象
 */
 function getLeafCountTree(json) {
     if (json) {

     }
 }

/**
 * 递归遍历 格式化数组
 * @param { Array } paramArr 目标数组
 * @param { Number } level 层级
 */
function formatArray(paramArr,level) {
    let levelFirst = Number(level)
    const arr = []
    let childArr = []
    for (let i = 0;i < paramArr.length; i++) {
        let obj = {}
        for (let j in paramArr[i]) {
            if ( j != 'children') {
                obj[j] = paramArr[i][j]
            }

            obj['level'] = levelFirst

        }
    }
}


